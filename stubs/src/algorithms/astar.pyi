from typing import Any, Callable, Dict, List, Optional, Tuple

Position = Tuple[int, int]
PositionWithDepth = Tuple[int, int, int]
Board = List[List[int]]
Path = List[Position]
PathWithDepth = List[PositionWithDepth]

def search(s0: PositionWithDepth, goal: Position, succ: Callable[[PositionWithDepth, Any], PathWithDepth], remove: Callable[[PathWithDepth, Position], Tuple[PositionWithDepth, PathWithDepth]], insert: Callable[[PositionWithDepth, PathWithDepth], PathWithDepth], grid: Board, max: int, depth: int = ...) -> Tuple[Optional[PositionWithDepth], Dict[PositionWithDepth, Optional[PositionWithDepth]]]: ...
def remove_a_star(l: PathWithDepth, goal: Position) -> Tuple[PositionWithDepth, PathWithDepth]: ...
def insert_a_star(s: PositionWithDepth, l: PathWithDepth) -> PathWithDepth: ...
def manhattan_distance(f: Position, to: Position) -> int: ...
def a_star_heuristic(s: PositionWithDepth, goal: Position) -> int: ...
def is_free(x: int, y: int, grid: Board) -> bool: ...
def succ_with_depth(s: PositionWithDepth, grid: Board) -> PathWithDepth: ...
def dict2path(s, d): ...
def a_star(s0: Position, goal: Position, grid: Board) -> Optional[Path]: ...
