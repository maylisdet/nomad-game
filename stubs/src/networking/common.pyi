import asyncio
from typing import Any, Callable, DefaultDict, Dict, List

class IO(asyncio.Protocol):
    client_map: Dict[int, IO]
    callback_map: DefaultDict[str, List[Callable[[str, IO], None]]]
    on_connection_lost: Any
    def __init__(self, on_connection_lost: Any | None = ...) -> None: ...
    def __call__(self): ...
    transport: Any
    peername: Any
    ip: Any
    socket_id: Any
    def connection_made(self, transport) -> None: ...
    def data_received(self, data) -> None: ...
    def connection_lost(self, exc) -> None: ...
    @staticmethod
    def on(id_message, fn) -> None: ...
    @staticmethod
    def broadcast(message) -> None: ...
    @staticmethod
    def write_to(message: Any, client_id: int): ...
    @staticmethod
    def write_to_clients(message, clients: List[int]): ...
    def broadcast_to_others(self, message) -> None: ...
    def write(self, message: Any): ...
