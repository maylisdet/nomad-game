import abc
import uuid as uuid_lib
from abc import ABC, abstractmethod
from common import LocalGame as LocalGame, Message as Message, Move as Move, Player as Player, Profile as Profile, PublicGame as PublicGame
from typing import List

class I_CommCallsData(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def remove_local_game(self) -> None: ...
    @abstractmethod
    def store_current_game(self, local_game: LocalGame) -> None: ...
    @abstractmethod
    def store_local_game(self, local_game: LocalGame) -> None: ...
    @abstractmethod
    def store_connected_user(self, player_list: List[Player]) -> None: ...
    @abstractmethod
    def store_games(self, public_game_list: List[PublicGame]) -> None: ...
    @abstractmethod
    def add_connected_user(self, player: Player) -> None: ...
    @abstractmethod
    def add_spectator_in_game(self, player: Player) -> None: ...
    @abstractmethod
    def remove_disconnect_player(self, user_id: uuid_lib.UUID) -> None: ...
    @abstractmethod
    def remove_spectator(self, user_id: uuid_lib.UUID) -> None: ...
    @abstractmethod
    def player_join_game(self, player: Player) -> None: ...
    @abstractmethod
    def update_public_game(self, public_game: PublicGame) -> None: ...
    @abstractmethod
    def store_new_game(self, public_game: PublicGame) -> None: ...
    @abstractmethod
    def add_move_to_local_game(self, move: Move, game_finished: bool) -> None: ...
    @abstractmethod
    def add_new_message(self, message: Message) -> None: ...
    @abstractmethod
    def remove_pending_game(self, game_id: uuid_lib.UUID) -> None: ...
    @abstractmethod
    def update_user_profile(self, profile: Profile) -> None: ...
    @abstractmethod
    def get_profile(self) -> Profile: ...
