import abc
import uuid as uuid_lib
from abc import ABC, abstractmethod
from common import LocalGame as LocalGame, Message as Message, Move as Move, Player as Player, Profile as Profile, PublicGame as PublicGame
from typing import List, Tuple

class I_CommServerCallsData(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def create_game(self, local_game: LocalGame) -> PublicGame: ...
    @abstractmethod
    def add_spectator_to_game(self, user_id: uuid_lib.UUID, game_id: uuid_lib.UUID) -> LocalGame: ...
    @abstractmethod
    def delete_spectator_from_game(self, user_id: uuid_lib.UUID, game_id: uuid_lib.UUID) -> None: ...
    @abstractmethod
    def get_game_spectators(self, game_id: uuid_lib.UUID) -> List[Player]: ...
    @abstractmethod
    def get_game_players(self, game_id: uuid_lib.UUID) -> List[Player]: ...
    @abstractmethod
    def delete_game(self, game_id: uuid_lib.UUID) -> None: ...
    @abstractmethod
    def add_player_to_game(self, game_id: uuid_lib.UUID, user_id: uuid_lib.UUID) -> LocalGame: ...
    @abstractmethod
    def get_profile(self, user_id: uuid_lib.UUID) -> Profile: ...
    @abstractmethod
    def add_move(self, move: Move) -> None: ...
    @abstractmethod
    def is_game_finished(self, game_id: uuid_lib.UUID) -> bool: ...
    @abstractmethod
    def apply_result_to_profile(self, game_id: uuid_lib.UUID) -> Tuple[Profile, Profile]: ...
    @abstractmethod
    def add_message_to_game(self, game_id: uuid_lib.UUID, message: Message) -> None: ...
    @abstractmethod
    def update_profil(self, profile: Profile) -> None: ...
    @abstractmethod
    def add_user(self, profile: Profile) -> Player: ...
    @abstractmethod
    def get_players(self) -> List[Player]: ...
    @abstractmethod
    def get_available_games(self) -> List[PublicGame]: ...
    @abstractmethod
    def delete_user(self, user_id: uuid_lib.UUID) -> None: ...
